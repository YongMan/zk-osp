#!/bin/bash
set -eu

source $OSP_PROGRAM_HOME/scripts/common.sh

log_info "Check environment variables"
if ! check_unit_env; then
    log_fatal "Failed to check unit environment variables"
fi

log_info "Get local ip"
ip="$(hostname -i)"

log_info "Get client port"
client_port="$(unit-get client_port)"
if [[ -z $client_port ]]; then
    log_fatal "Failed to unit-get client_port"
fi

log_info "Get communicate port"
communicate_port="$(unit-get communicate_port)"
if [[ -z $communicate_port ]]; then
    log_fatal "Failed to unit-get communicate_port"
fi

bin_file=$OSP_UNIT_HOME/bin/zkServer.sh
conf_file=$OSP_UNIT_HOME/conf/zoo.cfg
myid_file=$OSP_UNIT_HOME/data/myid
conf_alter=$OSP_PROGRAM_HOME/scripts/conf-alter

#update zoo.conf
log_info "Set port"
${conf_alter} -f ${conf_file} -k clientPort -v ${client_port}

config_keys="
tickTime
initLimit
syncLimit
dataDir
logDir
"

for key in $config_keys; do
    value="$(config-get $key)"
    if [[ "$value" ]]; then
        log_info "Set config ${key} = ${value}"
        ${conf_alter} -f ${conf_file} -k $key -v $value
    fi
done

# use unit id as myid
myid="$(unit-get unit_id)"
if [[ "$myid" ]]; then
    log_info "Set myid to $myid"
    echo $myid > $myid_file
fi

# clear old servers in cfg file
log_info "Clear old servers"
${conf_alter} -f ${conf_file} -d -k server.*

# update server list
group_name="$(config-get group)"
if [[ "$group_name" ]]; then
    log_info "Set group name to $group_name"
    log_info "Get servers from bns"
    get_instance_by_service $group_name -ipo | while read s
    do
        echo $s
        unit_id=`echo $s | awk '{print $4}'`
        ip=`echo $s | awk '{print $2}'`
        client_port=`echo $s | awk '{print $3}'`
        communicate_port=$(($client_port+1))
        election_port=$(($client_port+2))
        key="server.${unit_id}"
        value="${ip}:${communicate_port}:${election_port}"
        log_info "Set $key = $value"
        ${conf_alter} -f ${conf_file} -k $key -v $value
    done
fi

${bin_file} restart
